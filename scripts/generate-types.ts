/**
 * Generate *.d.ts files from JSON Schemas in public/schema/
 *
 * Example:
 *   public/schema/pathwayMetadata.v1.json → src/types/pathwayMetadata.v1.d.ts
 *   → Root interface name: PathwayMetadataV1
 */

import { compile } from "json-schema-to-typescript";
import { promises as fs } from "fs";
import path from "path";

const SCHEMA_DIR = "src/schema";
const OUT_DIR = "src/types";

async function generateAll() {
  const files = await fs.readdir(SCHEMA_DIR);
  const schemaFiles = files.filter((f) => f.endsWith(".json"));

  await fs.mkdir(OUT_DIR, { recursive: true });

  for (const file of schemaFiles) {
    const inputPath = path.join(SCHEMA_DIR, file);
    const outputPath = path.join(OUT_DIR, file.replace(".json", ".d.ts"));

    // Extract "pathwayMetadata.v1" → "PathwayMetadataV1"
    const base = file.replace(".json", "");
    const typeName = base
      .split(".")
      .map((seg) => seg.charAt(0).toUpperCase() + seg.slice(1))
      .join("");

    console.log(`Generating ${outputPath} as ${typeName}`);

    // Read & parse the JSON schema
    const raw = await fs.readFile(inputPath, "utf8");
    const schema = JSON.parse(raw);

    // Ensure the generator prefers our desired name:
    //  - compile(schema, name) should set the root name
    //  - setting `title` makes it unambiguous across versions
    schema.title = typeName;

    const ts = await compile(schema, typeName, {
      bannerComment:
        "/**\n* This file was automatically generated by json-schema-to-typescript.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSON Schema file,\n* and run json-schema-to-typescript to regenerate this file.\n*/",
      additionalProperties: false,
      unreachableDefinitions: false,
      // Ensure nested/definition names are stable & pretty:
      // (schema, keyFromDefinitionOrRef) => desiredName | undefined
    });

    await fs.writeFile(outputPath, ts);
  }

  console.log("Type generation complete.");
}

generateAll().catch((err) => {
  console.error("Error generating types:", err);
  process.exit(1);
});
