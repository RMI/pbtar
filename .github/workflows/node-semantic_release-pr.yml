---
on:
  workflow_call:

name: Semantic Release Preview

permissions:
  contents: read # for checkout

jobs:
  release-preview:
    name: Release Preview
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.base_ref }}

      - name: Merge PR branch to PR target
        env:
          HEAD_BRANCH: ${{ github.head_ref }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git merge "origin/$HEAD_BRANCH"

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: |
          npm clean-install

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: |
          npm audit signatures

      - name: Compute preview version
        id: ver
        run: |
          echo "preview-version=0.0.0-pr.${{ github.event.pull_request.number }}.${{ github.run_number }}" >> $GITHUB_OUTPUT

      # Update package.json locally (no commit, no tag)
      - name: Set package.json version
        env:
          PREVIEW_VERSION: ${{ steps.ver.outputs.preview-version }}
        run: |
          npm version "$PREVIEW_VERSION" --no-git-tag-version
          jq -r '.version' package.json  # sanity check

      - name: Build
        run: |
          npm run prepare:tarball
        env:
          VITE_BUILD_MODE: |
            ${{
              ((github.event_name == 'push' && github.ref_name == 'production') && 'production') ||
              ((github.event_name == 'push' && github.ref_name == 'main') && 'development') ||
              (github.event_name == 'push' && github.ref_name) ||
              ((github.event_name == 'pull_request' && github.ref_name == 'next') && 'staging') ||
              (github.event_name == 'pull_request' && format('{0}-{1}', 'pr', github.event.pull_request.number)) ||
              github.ref_name
            }}
          VITE_GITHUB_ACTOR: ${{ github.actor }}
          VITE_GITHUB_EVENT_NAME: ${{ github.event_name }}
          VITE_GITHUB_REPOSITORY: ${{ github.repository }}
          VITE_GITHUB_REF: ${{ github.ref }}
          VITE_GITHUB_SHA: ${{ github.sha }}
          VITE_GITHUB_HEAD_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          VITE_GITHUB_WORKFLOW: ${{ github.workflow }}
          VITE_GITHUB_WORKFLOW_REF: ${{ github.workflow_ref }}
          VITE_GITHUB_WORKFLOW_SHA: ${{ github.workflow_sha }}
          VITE_GITHUB_RUN_ID: ${{ github.run_id }}
          VITE_GITHUB_RUN_NUMBER: ${{ github.run_number }}
          VITE_GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
          VITE_BUILD_MACHINE_NAME: ${{ runner.name }}
          VITE_BUILD_OS: ${{ runner.os }}
          VITE_BUILD_OS_VERSION: ${{ runner.os-version }}
          VITE_BUILD_ARCH: ${{ runner.arch }}
          VITE_GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}

        # Reuse the artifact for downstream deploy
      - name: Upload dist.tgz as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-tgz
          path: dist.tgz
          if-no-files-found: error

      - name: Dry-run Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          unset GITHUB_ACTIONS
          npx semantic-release \
            --dry-run \
            --no-ci | \
          tee /tmp/semantic-release-raw.txt

      - name: prepare semantic-release output for comment
        env:
          HEAD_BRANCH: ${{ github.head_ref }}
        run: |
          sed -n \
            -e '1,/Release note for version/d; p' \
            /tmp/semantic-release-raw.txt \
          | sed -E \
            -e  's/^[[:space:]]*\*/\*/' \
          | sed \
            -e "1s|\(\.\.\.[^)]*\))|...${HEAD_BRANCH} )|" \
            -e "1s/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/$(date -u '+%Y-%m-%dT%H:%M UTC')/" \
            -e "1s/^# /## /" \
          | sed '1s/^/# Expected version change and release notes:\n/' \
          > /tmp/semantic-release-clean.txt

          if [ ! -s /tmp/semantic-release-clean.txt ]; then
            echo "# Expected version change and release notes" \
              > /tmp/semantic-release-clean.txt
            echo "## ðŸš¨ WARNING: This PR is not expected to trigger a new version" \
              >> /tmp/semantic-release-clean.txt
            echo "To trigger a version bump, use at least one conventional commit message in this branch." \
              "See: https://www.conventionalcommits.org/en/v1.0.0/" \
              >> /tmp/semantic-release-clean.txt
          fi

      - name: preview semantic-release output for comment
        run: |
          cat /tmp/semantic-release-clean.txt

      - name: Find Comment
        # https://github.com/peter-evans/find-comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "# Expected version change and release notes:"

      - name: Create or update comment
        # https://github.com/peter-evans/create-or-update-comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: /tmp/semantic-release-clean.txt
          edit-mode: replace
